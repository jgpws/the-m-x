/**
 * File jgd-grid.js.
 *
 * This script adds extra options to control the theme layout
 * It is used with jgd-material-grid.css
 * Copyright 2016-2019, Jason G. Designs
 *
 * License: GNU GPL, version 3
 */

document.addEventListener('DOMContentLoaded', function () {

 	function gridSizes() {
 		var windowWidth = window.innerWidth;

		var pageContainer = document.querySelector( '.page article.page' );
	 	var stickyContainers = document.querySelectorAll( '.blog .sticky, .archive .sticky' );
	 	var singlePostContainer = document.querySelector( '.single .post' );
	 	var commentsContainer = document.querySelector( '.single .comments-area' );
	 	var bodyTag = document.getElementsByTagName( 'body' )[0];
	 	var i;

 		if ( windowWidth >= 1280 ) {
 			//console.log( 'Window size is greater than 1280' );
			if ( document.body.contains( singlePostContainer ) ) {
				if ( jgdGridParams.layouts === 'twobytwo' ) {
					singlePostContainer.classList.add( 'three-fourths-centered-r' );
					singlePostContainer.classList.remove( 'two-by-two-centered-r' );
				}
			}

			// If body class contains "page" and doesn't contain "paged"
			if ( -1 !== bodyTag.className.indexOf( 'page' ) && -1 === bodyTag.className.indexOf( '-page' ) &&
					-1 === bodyTag.className.indexOf( 'paged' ) ) {
				if ( jgdGridParams.layouts === 'twobytwo' ) {
					pageContainer.classList.add( 'three-fourths-centered-r' );
					pageContainer.classList.remove( 'two-by-two-centered-r' );
				}
			}

			for ( i = 0, len = stickyContainers.length; i < len; i++ ) {
				if ( jgdGridParams.layouts === 'twobytwo' ) {
					stickyContainers[i].classList.add( 'two-by-two-centered-r' );
					stickyContainers[i].classList.remove( 'three-fourths-centered-r' );
					stickyContainers[i].classList.remove( 'jgd-column-1' );
				}
			}

			if ( jgdGridParams.layouts === 'wide' && commentsContainer ) {
				commentsContainer.classList.add( 'jgd-column-1' );
				commentsContainer.classList.remove( 'three-fourths-centered-r' );
			}
 		} else if ( windowWidth <= 1279 && windowWidth >= 720 ) {
 			//console.log( 'Window size is greater than 720' );
 			for ( i = 0, len = stickyContainers.length; i < len; i++ ) {
				if ( jgdGridParams.layouts === 'twobytwo' ) {
					stickyContainers[i].classList.add( 'three-fourths-centered-r' );
					stickyContainers[i].classList.remove( 'jgd-column-1' );
					stickyContainers[i].classList.remove( 'two-by-two-centered-r' );
				}
			}

			if ( jgdGridParams.layouts === 'wide' && commentsContainer ) {
				commentsContainer.classList.add( 'jgd-column-1' );
				commentsContainer.classList.remove( 'three-fourths-centered-r' );
			}
 		} else {
 			//console.log('Window size is less than 720');
 			for ( i = 0, len = stickyContainers.length; i < len; i++ ) {
				if ( jgdGridParams.layouts === 'twobytwo' ) {
					stickyContainers[i].classList.add( 'jgd-column-1' );
					stickyContainers[i].classList.remove( 'three-fourths-centered-r' );
					stickyContainers[i].classList.remove( 'two-by-two-centered-r' );
				}
			}

			if ( jgdGridParams.layouts === 'wide' && commentsContainer ) {
				commentsContainer.classList.add( 'jgd-column-1' );
				commentsContainer.classList.remove( 'three-fourths-centered-r' );
			}
 		}
 	}

 	var gSTimeout = setTimeout( gridSizes, 100 );

	window.onload = gridSizes;
	window.onresize = gridSizes;

 });

/**
 * File the-mx-scripts.js.
 *
 * Extra scripts for navigation, slideshow controls, animations, etc.
 * Licenses for the scripts are GPLv3 or compatible
 */

var makeCounter = function() {
  var privateCounter = 0;

  function changeBy(val) {
    privateCounter += val;
  }

  return {
    increment: function() {
      changeBy(1);
    },

    decrement: function() {
      changeBy(-1);
    },

    value: function() {
      return privateCounter;
    }
  };
};

/* Global counter variables for next/previous buttons in this file and animations.js */
var counter0 = makeCounter();
var counter1 = makeCounter();
var counter2 = makeCounter();
var counter3 = makeCounter();
var counter4 = makeCounter();
var counter5 = makeCounter();
var counter6 = makeCounter();
var counter7 = makeCounter();
var counter8 = makeCounter();
var counter9 = makeCounter();
//console.log(counter5);

(function() {

  // Global variables
  var windowWidth;
  var windowHeight = window.innerHeight;
  var bodyElHeight = document.getElementsByTagName('body')[0].clientHeight;
  var headerPanel = document.getElementById('header-button-panel');
  var socialContainer = document.getElementById('menu-social');
  var menu = document.querySelector('.main-navigation ul');
  var customSubmenuButton;


  /* Functions to convert hex values to RGB values
   * http://www.javascripter.net/faq/hextorgb.htm
   */
  function hexToR(h) {
    return parseInt((cutHex(h)).substring(0, 2), 16);
  }

  function hexToG(h) {
    return parseInt((cutHex(h)).substring(2, 4), 16);
  }

  function hexToB(h) {
    return parseInt((cutHex(h)).substring(4, 6), 16);
  }

  function cutHex(h) {
    return (h.charAt(0) === "#") ? h.substring(1, 7) : h;
  }


  function headerTitleRGBA() {
    var headerTitleCss = '.site-title a:link,\n' +
      '.site-title a:visited {\n' +
      '\tcolor: rgba(' + hexToR(colorScheme.headerTextColor) + ', ' + hexToG(colorScheme.headerTextColor) + ', ' + hexToB(colorScheme.headerTextColor) + ', 0.87);' +
      '\n}\n\n' +

      '.site-title a:hover,\n' +
      '.site-title a:focus {\n' +
      '\tcolor: #' + colorScheme.headerTextColor + ' !important;' +
      '\n}\n\n';

    var headerTitleStyle = document.createElement('style');

    if (headerTitleStyle.styleSheet) {
      headerTitleStyle.styleSheet.cssText = headerTitleCss;
    } else {
      headerTitleStyle.appendChild(document.createTextNode(headerTitleCss));
    }
    document.getElementsByTagName('head')[0].appendChild(headerTitleStyle);
  }


  function addMobileSocialButton() {
    if (socialContainer) {
      socialContainer.insertAdjacentHTML('beforebegin', '<button class="social-toggle" id="social-button"><i class="material-icons">&#xE7FD;</i></button>');
    }
  }


  function loadInitSocialMenuState() {
    var socialToggleButton = document.getElementById('social-button');
    windowWidth = window.innerWidth;

    if (typeof(socialContainer) != 'undefined' && socialContainer != null) {
      if (windowWidth < 768) {
        socialToggleButton.classList.remove('hide');
        socialContainer.classList.add('hide');
      } else {
        socialToggleButton.classList.add('hide');
        socialContainer.classList.remove('hide');
      }
    }
  }


  function toggleSocialPanel() {
    /* Toggle social media button panel */
    var socialToggleButton = document.getElementById('social-button');

    if (socialContainer) {
      socialToggleButton.onclick = function() {
        if (-1 !== socialContainer.className.indexOf('toggled')) {
          socialContainer.className = socialContainer.className.replace(' toggled', '');
          socialContainer.classList.add('hide');
          socialContainer.setAttribute('aria-expanded', 'false');
        } else {
          socialContainer.className += ' toggled';
          socialContainer.classList.remove('hide');
          socialContainer.setAttribute('aria-expanded', 'true');
        }
      };
    }
  }


  function socialMediaButtons() {
    /* add social media icons to links in the Social Media Icons menu */
    /* by adding specific classes to a tags with *.com strings */

    // if the container for the social icons exists
    if (document.body.contains(socialContainer)) {
      var fbLink = document.querySelector('#menu-social-items li a[href*="facebook.com"]');
      var twLink = document.querySelector('#menu-social-items li a[href*="twitter.com"]');
      var instLink = document.querySelector('#menu-social-items li a[href*="instagram.com"]');
      var pntLink = document.querySelector('#menu-social-items li a[href*="pinterest.com"]');
      var ytLink = document.querySelector('#menu-social-items li a[href*="youtube.com"]');
      var vimLink = document.querySelector('#menu-social-items li a[href*="vimeo.com"]');
      var flkLink = document.querySelector('#menu-social-items li a[href*="flickr.com"]');
      var gthbLink = document.querySelector('#menu-social-items li a[href*="github.com"]');
      var gpLink = document.querySelector('#menu-social-items li a[href*="plus.google.com"]');
      var tmbLink = document.querySelector('#menu-social-items li a[href*="tumblr.com"]');
      var wpLink = document.querySelector('#menu-social-items li a[href*="wordpress.com"]');
      var wpOrgLink = document.querySelector('#menu-social-items li a[href*="wordpress.org"]');

      if (fbLink) {
        fbLink.classList.add('ti-facebook');
      }
      if (twLink) {
        twLink.classList.add('ti-twitter-alt');
      }
      if (instLink) {
        instLink.classList.add('ti-instagram');
      }
      if (pntLink) {
        pntLink.classList.add('ti-pinterest');
      }
      if (ytLink) {
        ytLink.classList.add('ti-youtube');
      }
      if (vimLink) {
        vimLink.classList.add('ti-vimeo-alt');
      }
      if (flkLink) {
        flkLink.classList.add('ti-flickr-alt');
      }
      if (gthbLink) {
        gthbLink.classList.add('ti-github');
      }
      if (gpLink) {
        gpLink.classList.add('ti-google');
      }
      if (tmbLink) {
        tmbLink.classList.add('ti-tumblr-alt');
      }
      if (wpLink) {
        wpLink.classList.add('ti-wordpress');
      }
      if (wpOrgLink) {
        wpOrgLink.classList.add('ti-wordpress');
      }
    }
  }


  function toggleSidebar() {
    /* Toggle sidebar script */
    var container, toggleButton, sidebar, chevronLeft, chevronRight;
    //var bodyEl = document.getElementsByTagName( 'body' )[0];
    //console.log( 'body height is: ' + bodyElHeight );
    //console.log( 'window height is: ' + window.outerHeight );

    container = document.getElementById('content');
    if (!container) {
      return;
    }

    toggleButton = document.getElementById('sidebar-button');

    sidebar = document.querySelector('.sidebar-overlay #secondary');

    // Create chevron logo elements
    chevronLeft = document.createElement('i');
    cLeftContent = document.createTextNode('chevron_left');
    chevronLeft.appendChild(cLeftContent);
    chevronLeft.classList.add('material-icons');

    chevronRight = document.createElement('i');
    cRightContent = document.createTextNode('chevron_right');
    chevronRight.appendChild(cRightContent);
    chevronRight.classList.add('material-icons');

    // Hide sidebar toggle button if menu is empty and return early.
    // first check if sidebar shows up in the theme; if the element with id #secondary exists (is contained) in the body
    if (document.body.contains(sidebar)) {

      if ('undefined' === typeof sidebar) {
        toggleButton.classList.add('hide');
        return;
      }

      sidebar.setAttribute('aria-expanded', 'false');
      // Absolutely positioned sidebar flows outside of its container, adding space below the footer
      // So, the sidebar's max height is set to the same as the body.
      if (bodyElHeight > window.outerHeight) {
        //sidebar.style.maxHeight = ( bodyElHeight - window.outerHeight ) + 'px';
        sidebar.style.maxHeight = window.outerHeight + 'px';
      } else {
        sidebar.style.maxHeight = bodyElHeight + 'px';
      }


      // set initial menu state here, instead of CSS file, in case JavaScript is turned off in browser.
      sidebar.classList.add('hide');
      if (document.body.contains(toggleButton)) {
        toggleButton.appendChild(chevronLeft);
        toggleButton.setAttribute('title', 'Click or press Enter to open/close the sidebar.');

        toggleButton.onclick = function() {
          if (-1 !== container.className.indexOf('toggled')) {
            container.className = container.className.replace(' toggled', '');
            toggleButton.className = toggleButton.className.replace(' toggled', '');
            toggleButton.setAttribute('aria-expanded', 'false');
            sidebar.setAttribute('aria-expanded', 'false');
            sidebar.classList.add('hide');
            toggleButton.appendChild(chevronLeft);
            toggleButton.removeChild(chevronRight);
          } else {
            container.className += ' toggled';
            toggleButton.className += ' toggled';
            toggleButton.setAttribute('aria-expanded', 'true');
            sidebar.setAttribute('aria-expanded', 'true');
            sidebar.classList.remove('hide');
            toggleButton.removeChild(chevronLeft);
            toggleButton.appendChild(chevronRight);
          }
        };
      }

    }
  }


  function addOverlayToSidebar(e) {
    /* Add a "scrim" div to the bottom of the sidebar when Overlay design is used (sidebar slides in/out) */
    var overlayStylesheet = document.head.querySelector('link[href*="/layouts/content-sidebar-overlay.css"]');
    var theSidebar = document.querySelector('.sidebar-overlay #secondary');
    var theScrim;

    function placeScrim() {
      if (bodyElHeight > window.outerHeight) {
        //console.log( 'sidebar height is: ' + theSidebar.getBoundingClientRect().height );
        theScrim.style.position = 'fixed';
        theScrim.style.bottom = '0px';
        window.addEventListener('scroll', scrimTimeout);
      } else {
        //console.log(document.body.clientHeight);
        //console.log(theSidebar.getBoundingClientRect().height);
        theScrim.style.position = 'fixed';
        theScrim.style.bottom = document.body.clientHeight - theSidebar.getBoundingClientRect().height + 'px';
      }
    }

    function animateScrim() {
      theScrim.classList.add('animated');
      if (window.pageYOffset > theSidebar.getBoundingClientRect().height - window.innerHeight) {
        theScrim.style.opacity = '0';
        theScrim.style.transitionDuration = '1s';
      } else {
        theScrim.style.opacity = '1';
        theScrim.style.transitionDuration = '0.5s';
      }
    }

    function scrimTimeout() {
      scrTimeout = setTimeout(animateScrim, 250);
    }

    if (document.body.contains(theSidebar)) {
      if (overlayStylesheet !== '') {
        theSidebar.insertAdjacentHTML('beforeend', '<div class="scrim"></div>');
      }

      theScrim = document.querySelector('.sidebar-overlay #secondary .scrim');

      placeScrim();
      animateScrim();
      scrimTimeout();
    }

  }

  function toggleSearchbar() {
    /* Toggle search bar with button */

    var searchToggleButton, searchField, searchContainer;

    if (document.body.contains(headerPanel)) { // check if headerPanel exists

      if (document.body.classList.contains('page-template-template-landing') || document.body.classList.contains('woocommerce-page')) {
        return;
      } else {
        // Create and add searchToggleButton to header button panel
        searchToggleButton = document.createElement('button');
        searchIcon = document.createElement('i');
        sIconContent = document.createTextNode('search');

        headerPanel.appendChild(searchToggleButton);
        searchToggleButton.appendChild(searchIcon);
        searchToggleButton.classList.add('search-toggle');

        searchIcon.appendChild(sIconContent);
        searchIcon.classList.add('material-icons');


        // Get the first instance of searchform (class) within .header-button-panel
        searchContainer = document.getElementById('header-button-panel').getElementsByClassName('searchform')[0];
        toggleSearch = document.getElementById('header-button-panel').getElementsByClassName('search-toggle')[0];
        searchField = document.getElementsByClassName('search-field')[0];

        // Set initial search field state here, instead of CSS file, in case JavaScript is turned off in browser.
        searchContainer.setAttribute('aria-expanded', 'false');
        searchContainer.classList.add('hide');

        // Toggle search field
        toggleSearch.onclick = function() {
          if (-1 !== searchContainer.className.indexOf('toggled')) {
            searchContainer.className = searchContainer.className.replace(' toggled', '');
            searchContainer.classList.add('hide');
            searchContainer.setAttribute('aria-expanded', 'false');
          } else {
            searchContainer.className += ' toggled';
            searchContainer.classList.remove('hide');
            searchContainer.setAttribute('aria-expanded', 'true');
          }
        };
      }

    }
  }

  function addDesktopNavButtons() {
    /* Add buttons to the navigation menu for desktop widths */
    // setup variables
    var hasChildren = document.querySelectorAll('.main-navigation .page_item_has_children');
    var hasChildrenLink = document.querySelectorAll('.main-navigation .page_item_has_children > a');
    var customHasChildren = document.querySelectorAll('.main-navigation .menu-item-has-children');
    var customHasChildrenLink = document.querySelectorAll('.main-navigation .menu-item-has-children > a');

    // For custom menus
    for (var i = 0; i < customHasChildren.length; i++) {
      //console.log( customHasChildrenLink[i].parentNode );
      //console.log( customHasChildrenLink[i] );
      // Add button HTML after each link that has the class .menu-item-has-children
      customHasChildrenLink[i].insertAdjacentHTML('afterend', '<button class="menu-down-arrow"><i class="material-icons">arrow_drop_down</i></button>');
    }

    // For page menu fallback
    for (var i2 = 0; i2 < hasChildren.length; i2++) {
      //console.log( hasChildrenLink[i2].parentNode );
      //console.log( hasChildrenLink[i2] );
      // Add button HTML after each link that has the class .page_item_has_children
      hasChildrenLink[i2].insertAdjacentHTML('afterend', '<button class="menu-down-arrow"><i class="material-icons">arrow_drop_down</i></button>');
    }
  }

  function toggleMenuItems() {
    /* The code below roughly follows the Vanilla JS method in the article "Lose the jQuery Bloat" */
    /* https://www.sitepoint.com/dom-manipulation-with-nodelist-js/ */
    // loop through each element that has .sub-menu
    var customSubmenuButton = document.querySelectorAll('.main-navigation .menu-down-arrow, .is-style-the-mx-nav .wp-block-navigation-submenu__toggle');

    for (var iSub = 0; iSub < customSubmenuButton.length; iSub++) {
      // Add click event to the button to show ul.sub-menu
      customSubmenuButton[iSub].addEventListener('click', function() {
        // this refers to the current loop iteration of customSubmenuButton
        // nextElementSibling refers to the neighboring ul with .sub-menu class
        if (this.nextElementSibling.className.indexOf('toggled-submenu') !== -1) { // if .sub-menu has .toggled-submenu class
          this.nextElementSibling.className = this.nextElementSibling.className.replace(' toggled-submenu', ''); // remove it
          this.nextElementSibling.setAttribute('aria-expanded', 'false');
          //console.log( 'button.' + this.className + ' is not toggled' );
        } else {
          this.nextElementSibling.className += ' toggled-submenu'; // otherwise, add it
          this.nextElementSibling.setAttribute('aria-expanded', 'true');
        }
        //console.log( 'button.' + this.className + ' is toggled' );
      });
      //console.log( customSubmenuButton[iSub] );
    } // ends for loop
    
    // Override to remove toggled-submenu class when clicking outside of the nav block
    window.addEventListener('click', function(e) {
    	var navBlock = document.querySelector('.is-style-the-mx-nav');
    	var navBlockSubmenu = document.querySelectorAll('.is-style-the-mx-nav .wp-block-navigation__submenu-container');
    	
    	if (document.body.contains(navBlock) && !navBlock.contains(e.target)) {
    		for (var iSub = 0; iSub < navBlockSubmenu.length; iSub++) {
    			navBlockSubmenu[iSub].classList.remove('toggled-submenu');
    		}
    	}
    });
  }

  function loadInitMenuState() {
    // Loads the menu state depending on screen size at the time of load
    windowWidth = window.innerWidth;
    var customSubmenuButton = document.querySelectorAll('.main-navigation .menu-down-arrow');
    if (typeof(menu) != 'undefined' && menu != null) { // if a menu exists on the page
      if (windowWidth < 600) {
        menu.classList.add('hide');
        for (i = 0; i < customSubmenuButton.length; i++) {
          customSubmenuButton[i].classList.add('hide');
        }
      } else {
        menu.classList.remove('hide');
        for (i = 0; i < customSubmenuButton.length; i++) {
          customSubmenuButton[i].classList.remove('hide');
        }
      }
    }
  }

  function disappearingHeader() {
    if (document.body.classList.contains('page-template-template-landing')) {
      var theHeader = document.querySelector('#masthead');

      var headroom = new Headroom(theHeader);
      headroom.init();
    }
  }


  /* For slider option in the Customizer */

  // Supports up to five galleries

  // Setup global variables for the gallery
  var gallery = document.querySelectorAll('.single.slider .gallery, .single.slider .wp-block-gallery');

  var galleries = [document.querySelector('.single.slider #gallery-1'),
    document.querySelector('.single.slider #gallery-2'),
    document.querySelector('.single.slider #gallery-3'),
    document.querySelector('.single.slider #gallery-4'),
    document.querySelector('.single.slider #gallery-5'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(1)'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(2)'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(3)'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(4)'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(5)')
  ];

  var slides = [document.querySelectorAll('.single.slider #gallery-1 .gallery-item'),
    document.querySelectorAll('.single.slider #gallery-2 .gallery-item'),
    document.querySelectorAll('.single.slider #gallery-3 .gallery-item'),
    document.querySelectorAll('.single.slider #gallery-4 .gallery-item'),
    document.querySelectorAll('.single.slider #gallery-5 .gallery-item'),
    document.querySelectorAll('.single.slider .wp-block-gallery:nth-of-type(1) .wp-block-image'),
    document.querySelectorAll('.single.slider .wp-block-gallery:nth-of-type(2) .wp-block-image'),
    document.querySelectorAll('.single.slider .wp-block-gallery:nth-of-type(3) .wp-block-image'),
    document.querySelectorAll('.single.slider .wp-block-gallery:nth-of-type(4) .wp-block-image'),
    document.querySelectorAll('.single.slider .wp-block-gallery:nth-of-type(5) .wp-block-image'),
    document.querySelectorAll('.single.slider .wp-block-gallery:nth-of-type(1) .blocks-gallery-item'),
    document.querySelectorAll('.single.slider .wp-block-gallery:nth-of-type(2) .blocks-gallery-item'),
    document.querySelectorAll('.single.slider .wp-block-gallery:nth-of-type(3) .blocks-gallery-item'),
    document.querySelectorAll('.single.slider .wp-block-gallery:nth-of-type(4) .blocks-gallery-item'),
    document.querySelectorAll('.single.slider .wp-block-gallery:nth-of-type(5) .blocks-gallery-item')
  ];
  var i, len;

  // Some of the articles and tutorials consulted for these functions are:
  // Understand JavaScript Closures With Ease- http://javascriptissexy.com/understand-javascript-closures-with-ease/
  // Make a Simple JavaScript Slideshow without jQuery- https://www.sitepoint.com/make-a-simple-javascript-slideshow-without-jquery/ <- for the start and pause functions
  // Closures- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures

  function showFirstSlide(arrayOfGals, arrayOfSlides) {
    /* arrayOfGals should be an array of galleries ex. var galleries = [ document.querySelector('.gallery-1'), document.querySelector('.gallery-2') ]; */
    /* arrayOfSlides should be an array of slides within the arrayOfGals ex. var slides = [ document.querySelectorAll('.gallery-1 .slides'), document.querySelectorAll('.gallery-2 .slides') ]; */

    // slides[0] = first location of the array in the slides variable, slides[1] = second, etc.
    // slides[0][0] = first slide inside of the first array

    for (var iGal = 0, len = arrayOfGals.length; iGal < len; iGal++) {
      // Loop through number of galleries
      //console.log('number of galleries: ' + iGal);

      for (var jSlide = 0, lenSlide = arrayOfSlides.length; jSlide < lenSlide; jSlide++) {
        // Loop through each set of slides
        //console.log('number of slides within gallery: ' + arrayOfSlides[jSlide].length); // for debugging
        //console.log(arrayOfSlides[0][0]); // for debugging
        //console.log(arrayOfSlides[jSlide]);

        // We must loop over each slide in the set when using querySelectorAll
        for (var kEachSlide = 0; kEachSlide < arrayOfSlides[jSlide].length; kEachSlide++) {
          //console.log(arrayOfSlides[jSlide][kEachSlide]);

          if (arrayOfSlides[jSlide] !== undefined) {
            //console.log(arrayOfSlides[counter][kEachSlide]);

            // Hide all slides within each slides array
            if (arrayOfSlides[jSlide][kEachSlide]) {
              arrayOfSlides[jSlide][kEachSlide].classList.add('hide');
            }

            // Show first slide within each slides array
            if (arrayOfSlides[jSlide][0]) {
              //console.log(arrayOfSlides[jSlide][0]);
              arrayOfSlides[jSlide][0].classList.remove('hide');
            }
          }
        }
      }
    }
  }

  for (i = 0, len = gallery.length; i < len; i++) {
    // Add slider controls to each gallery
    gallery[i].insertAdjacentHTML('afterend', '<div class="slider-button-panel"><button class="slider-previous"><i class="material-icons">skip_previous</i></button><button class="slider-startshow"><i class="material-icons">play_arrow</i></button><button class="slider-next"><i class="material-icons">skip_next</i></button></div>');
    //console.log(gallery.length);
  }

  // Variables that are defined after our dynamically created buttons/panel
  var buttonPanel = document.querySelectorAll('.single.slider .slider-button-panel');

  var sliderNext = [document.querySelector('.single.slider #gallery-1 + .slider-button-panel .slider-next'),
    document.querySelector('.single.slider #gallery-2 + .slider-button-panel .slider-next'),
    document.querySelector('.single.slider #gallery-3 + .slider-button-panel .slider-next'),
    document.querySelector('.single.slider #gallery-4 + .slider-button-panel .slider-next'),
    document.querySelector('.single.slider #gallery-5 + .slider-button-panel .slider-next'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(1) + .slider-button-panel .slider-next'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(2) + .slider-button-panel .slider-next'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(3) + .slider-button-panel .slider-next'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(4) + .slider-button-panel .slider-next'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(5) + .slider-button-panel .slider-next')
  ];

  var sliderPrevious = [document.querySelector('.single.slider #gallery-1 + .slider-button-panel .slider-previous'),
    document.querySelector('.single.slider #gallery-2 + .slider-button-panel .slider-previous'),
    document.querySelector('.single.slider #gallery-3 + .slider-button-panel .slider-previous'),
    document.querySelector('.single.slider #gallery-4 + .slider-button-panel .slider-previous'),
    document.querySelector('.single.slider #gallery-5 + .slider-button-panel .slider-previous'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(1) + .slider-button-panel .slider-previous'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(2) + .slider-button-panel .slider-previous'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(3) + .slider-button-panel .slider-previous'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(4) + .slider-button-panel .slider-previous'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(5) + .slider-button-panel .slider-previous')
  ];

  var slideshowBtn = [document.querySelector('.single.slider #gallery-1 + .slider-button-panel .slider-startshow'),
    document.querySelector('.single.slider #gallery-2 + .slider-button-panel .slider-startshow'),
    document.querySelector('.single.slider #gallery-3 + .slider-button-panel .slider-startshow'),
    document.querySelector('.single.slider #gallery-4 + .slider-button-panel .slider-startshow'),
    document.querySelector('.single.slider #gallery-5 + .slider-button-panel .slider-startshow'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(1) + .slider-button-panel .slider-startshow'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(2) + .slider-button-panel .slider-startshow'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(3) + .slider-button-panel .slider-startshow'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(4) + .slider-button-panel .slider-startshow'),
    document.querySelector('.single.slider .wp-block-gallery:nth-of-type(5) + .slider-button-panel .slider-startshow')
  ];

  /* Hide any galleries and button panels that are more than five; */
  /* for this we start the counter at 4 */
  for (i = 5, len = gallery.length; i < len; i++) {
    //console.log(gallery[i]);
    gallery[i].classList.add('hide');
  }

  for (i = 5, len = buttonPanel.length; i < len; i++) {
    //console.log(buttonPanel[i]);
    buttonPanel[i].classList.add('hide');
  }

  /* Show each subsequent slide one at a time by clicking the next and previous buttons */
  /* checking if each button exists on the page first */

  function addSlideClickEvents(slideItems, nextBtn, prevBtn, counter) {
    /* Next and previous buttons */
    /* ex: var sliderNext = document.querySelector('.gallery-1 .next-btn'); */
    /*     or var sliderNext = [ document.querySelector('.gallery-1 .next-btn'), document.querySelector('.gallery-2 .next-btn') ]

    /* Slide items */
    /* ex: var slides = document.querySelectorAll('.gallery-1 .gallery-item'); */
    /*     or var slides = [ document.querySelectorAll('.gallery-1 .gallery-item'), document.querySelectorAll('.gallery-2 .gallery-item') ] */

    if (nextBtn !== null) {
      nextBtn.addEventListener('click', function() {
        var currentIndex = counter.value();

        counter.increment();

        //console.log(slideItems.length - 1);
        //console.log(currentIndex + 1);

        slideItems[currentIndex].classList.add('hide');
        if (slideItems[currentIndex + 1] !== undefined) {
          slideItems[0].classList.add('hide');
          slideItems[currentIndex + 1].classList.remove('hide');
        }

        if (currentIndex + 1 === slideItems.length - 1) {
          nextBtn.setAttribute('disabled', '');
        }

        prevBtn.removeAttribute('disabled');
      });
    }

    if (prevBtn !== null) {
      /* Set previous button to disabled on page load, since there are no previous slides. */
      prevBtn.setAttribute('disabled', '');

      prevBtn.addEventListener('click', function() {
        currentIndex = counter.value();

        counter.decrement();

        //console.log(currentIndex - 1);

        if (slideItems[currentIndex - 1] !== undefined) {
          slideItems[currentIndex - 1].classList.remove('hide');
        }
        if (slideItems[currentIndex] !== undefined) {
          slideItems[currentIndex].classList.add('hide');
        }

        if ((currentIndex - 1) === 0) {
          prevBtn.setAttribute('disabled', '');
        }

        nextBtn.removeAttribute('disabled');
      });
    }
  }

  function addSlideshowEvents(slideshowBtn, nextBtn, prevBtn, slideItems, counter) {
    var isPlaying = false;
    var currentIndex = counter.value();
    var slideInterval;

    function startShow() {
      nextBtn.setAttribute('disabled', '');
      prevBtn.setAttribute('disabled', '');
      isPlaying = true;
      slideshowBtn.innerHTML = '<i class="material-icons">pause</i>';

      slideInterval = window.setInterval(incrementSlide, 5000);
    }

    function incrementSlide() {
      if (slideItems[currentIndex] !== undefined) {
        slideItems[currentIndex].classList.add('hide');
      }
      if (slideItems[currentIndex + 1] !== undefined) {
        slideItems[currentIndex + 1].classList.remove('hide');
      }

      if (currentIndex + 1 === slideItems.length - 1) {
        slideshowBtn.innerHTML = '<i class="material-icons">play_arrow</i>';
        isPlaying = false;

      }

      if (currentIndex + 1 === slideItems.length) {
        nextBtn.removeAttribute('disabled');
        clearInterval(slideInterval);
        //console.log(slideItems[slideItems.length - 1]);
        slideItems[0].classList.remove('hide');
      }
      currentIndex++;
    }

    function pauseShow() {
      isPlaying = false;
      slideshowBtn.innerHTML = '<i class="material-icons">play_arrow</i>';
      clearInterval(slideInterval);
    }

    if (slideshowBtn) {
      slideshowBtn.addEventListener('click', function() {
        if (isPlaying === false) {
          startShow();
          //console.log('The slideshow is playing.');
        } else {
          pauseShow();
          //console.log('The slideshow is not playing.');
        }
      });
    }
  }

  function theMXInit() {
    headerTitleRGBA();
    addMobileSocialButton();
    loadInitSocialMenuState();
    toggleSocialPanel();
    socialMediaButtons();
    toggleSidebar();
    addOverlayToSidebar();
    toggleSearchbar();
    addDesktopNavButtons();
    toggleMenuItems();
    loadInitMenuState();
    disappearingHeader();
    showFirstSlide(galleries, slides);

    addSlideClickEvents(slides[0], sliderNext[0], sliderPrevious[0], counter0);
    addSlideClickEvents(slides[1], sliderNext[1], sliderPrevious[1], counter1);
    addSlideClickEvents(slides[2], sliderNext[2], sliderPrevious[2], counter2);
    addSlideClickEvents(slides[3], sliderNext[3], sliderPrevious[3], counter3);
    addSlideClickEvents(slides[4], sliderNext[4], sliderPrevious[4], counter4);
    addSlideClickEvents(slides[5], sliderNext[5], sliderPrevious[5], counter5);
    addSlideClickEvents(slides[6], sliderNext[6], sliderPrevious[6], counter6);
    addSlideClickEvents(slides[7], sliderNext[7], sliderPrevious[7], counter7);
    addSlideClickEvents(slides[8], sliderNext[8], sliderPrevious[8], counter8);
    addSlideClickEvents(slides[9], sliderNext[9], sliderPrevious[9], counter9);

    addSlideshowEvents(slideshowBtn[0], sliderNext[0], sliderPrevious[0], slides[0], counter0);
    addSlideshowEvents(slideshowBtn[1], sliderNext[1], sliderPrevious[1], slides[1], counter1);
    addSlideshowEvents(slideshowBtn[2], sliderNext[2], sliderPrevious[2], slides[2], counter2);
    addSlideshowEvents(slideshowBtn[3], sliderNext[3], sliderPrevious[3], slides[3], counter3);
    addSlideshowEvents(slideshowBtn[4], sliderNext[4], sliderPrevious[4], slides[4], counter4);
    addSlideshowEvents(slideshowBtn[5], sliderNext[5], sliderPrevious[5], slides[5], counter5);
    addSlideshowEvents(slideshowBtn[6], sliderNext[6], sliderPrevious[6], slides[6], counter6);
    addSlideshowEvents(slideshowBtn[7], sliderNext[7], sliderPrevious[7], slides[7], counter7);
    addSlideshowEvents(slideshowBtn[8], sliderNext[8], sliderPrevious[8], slides[8], counter8);
    addSlideshowEvents(slideshowBtn[9], sliderNext[9], sliderPrevious[9], slides[9], counter9);
  }
  document.addEventListener('DOMContentLoaded', theMXInit);

  function theMXResize() {
    var timeOut = setTimeout(function() {
      loadInitMenuState();
      loadInitSocialMenuState();
    }, 250);
  }
  window.addEventListener('resize', theMXResize);
})();

/**
 * File navigation.js.
 *
 * Handles toggling the navigation menu for small screens and enables TAB key
 * navigation support for dropdown menus.
 */
( function() {
	var container, button, menu, links, subMenus, i, len;

	container = document.getElementById( 'site-navigation' );
	if ( ! container ) {
		return;
	}

	button = container.getElementsByTagName( 'button' )[0];
	if ( 'undefined' === typeof button ) {
		return;
	}

	menu = container.getElementsByTagName( 'ul' )[0];

	// Hide menu toggle button if menu is empty and return early.
	if ( 'undefined' === typeof menu ) {
		button.style.display = 'none';
		return;
	}

	menu.setAttribute( 'aria-expanded', 'false' );
	
	if ( -1 === menu.className.indexOf( 'nav-menu' ) ) {
		menu.className += ' nav-menu';
	}

	button.onclick = toggleMenu;
	
	function toggleMenu() {
		if ( -1 !== container.className.indexOf( 'toggled' ) ) {
			container.className = container.className.replace( ' toggled', '' );
			button.className = button.className.replace( ' toggled', '' );
			button.setAttribute( 'aria-expanded', 'false' );
			menu.setAttribute( 'aria-expanded', 'false' );
			menu.classList.add('hide');
		} else {
			container.className += ' toggled';
			button.className += ' toggled';
			button.setAttribute( 'aria-expanded', 'true' );
			menu.setAttribute( 'aria-expanded', 'true' );
			menu.classList.remove('hide');
		}
	}

	// Get all the link elements within the menu.
	links    = menu.getElementsByTagName( 'a' );
	subMenus = menu.getElementsByTagName( 'ul' );

	// Set menu items with submenus to aria-haspopup="true".
	for ( i = 0, len = subMenus.length; i < len; i++ ) {
		subMenus[i].parentNode.setAttribute( 'aria-haspopup', 'true' );
	}

	// Each time a menu link is focused or blurred, toggle focus.
	for ( i = 0, len = links.length; i < len; i++ ) {
		links[i].addEventListener( 'focus', toggleFocus, true );
		links[i].addEventListener( 'blur', toggleFocus, true );
	}

	/**
	 * Sets or removes .focus class on an element.
	 */
	function toggleFocus() {
		var self = this;

		// Move up through the ancestors of the current link until we hit .nav-menu.
		while ( -1 === self.className.indexOf( 'nav-menu' ) ) {

			// On li elements toggle the class .focus.
			if ( 'li' === self.tagName.toLowerCase() ) {
				if ( -1 !== self.className.indexOf( 'focus' ) ) {
					self.className = self.className.replace( ' focus', '' );
				} else {
					self.className += ' focus';
				}
			}

			self = self.parentElement;
		}
	}
} )();

/**
 * File skip-link-focus-fix.js.
 *
 * Helps with accessibility for keyboard only users.
 *
 * Learn more: https://git.io/vWdr2
 */
( function() {
	var isWebkit = navigator.userAgent.toLowerCase().indexOf( 'webkit' ) > -1,
	    isOpera  = navigator.userAgent.toLowerCase().indexOf( 'opera' )  > -1,
	    isIe     = navigator.userAgent.toLowerCase().indexOf( 'msie' )   > -1;

	if ( ( isWebkit || isOpera || isIe ) && document.getElementById && window.addEventListener ) {
		window.addEventListener( 'hashchange', function() {
			var id = location.hash.substring( 1 ),
				element;

			if ( ! ( /^[A-z0-9_-]+$/.test( id ) ) ) {
				return;
			}

			element = document.getElementById( id );

			if ( element ) {
				if ( ! ( /^(?:a|select|input|button|textarea)$/i.test( element.tagName ) ) ) {
					element.tabIndex = -1;
				}

				element.focus();
			}
		}, false );
	}
})();

/* Script to control animate.css */

(function() { // opens document ready function
  "use strict";


  // Function to add then immediately remove animate.css classes by name
  // element = a string in quotes representing an element .class or #id; animation = animation name without animate__ prefix.
  const animateCSS = (element, animation, prefix = 'animate__') =>
    new Promise((resolve, reject) => {
      const animationName = `${prefix}${animation}`;
      const node = document.querySelector(element);

      // Check if node exists on page
      if (node !== 'undefined' && node !== null) {
        node.classList.add(`${prefix}animated`, animationName);

        function handleAnimationEnd(event) {
          event.stopPropagation();
          node.classList.remove(`${prefix}animated`, animationName);
          resolve('Animation ended');
        }

        node.addEventListener('animationend', handleAnimationEnd, {once: true});
      }
    });


  // Helper function to hide elements after animation completes;
  // Use in the else part of if statement
  const hideAfterAnimation = (element, duration) => {
    if (element.classList.contains('hide')) {

      // Remove the .hide class
      element.classList.remove('hide');

      // Set a timeout to the length of the animation
      Number.isInteger(duration);

      setTimeout(function() {
        element.classList.add('hide');
      }, duration);
    }
  }


  // Shared global variables
  let viewportWidth = window.innerwidth;
  let searchForm = document.querySelector('#header-button-panel .searchform');
  let sidebarButton = document.querySelector('.sidebar-toggle');

  let preloadDiv = document.querySelector('#loader-wrapper');
  let bodyDiv = document.querySelector('body');


  function animateSearchbar() {
    // Search
    let searchToggleButton = document.querySelector('.search-toggle');
    let searchButton = document.querySelector('.searchform .search-icon');
    let searchIcon = document.querySelector('.search-icon .material-icons');

    // Since the icon was dynamically created, it must be searched from a parent object via event delegation
    if (searchButton !== null) {
      searchButton.addEventListener('mouseenter', event => {
        if (event.target.className === 'search-icon') {
          animateCSS('.search-icon .material-icons', 'rubberBand');
        }
      });
    }

    // Check if search button exists on the page
    if (searchToggleButton !== null) {
      searchToggleButton.addEventListener('click', function() {
        if (searchForm.classList.contains('toggled')) {
          animateCSS('#header-button-panel .searchform', 'fadeInRight');
          animateCSS('.sidebar-toggle', 'fadeInRight');
        } else {
          animateCSS('#header-button-panel .searchform', 'fadeOutRight');
          hideAfterAnimation(searchForm, 1000);
          animateCSS('.sidebar-toggle', 'fadeOutRight');
        }
      });
    }
  }


  function animateMenu() {
    // Menus

    let viewportWidth = window.innerWidth;
    let mainMenu = document.querySelector('.main-navigation');
    let menuButton = document.querySelector('.main-navigation .menu-toggle');
    let menuDropdownButton = document.querySelectorAll('.main-navigation .menu-down-arrow, .is-style-the-mx-nav .open-on-hover-click .wp-block-navigation-submenu__toggle');
    let menuDropdownOnClick = document.querySelectorAll('.is-style-the-mx-nav .open-on-click .wp-block-navigation-submenu__toggle'); // Block editor- reveal submenu from clicking title
    let mobileMenu = document.querySelector('#primary-menu .nav-menu');
    let mobileSubmenu = document.querySelectorAll('#primary-menu .nav-menu ul');
    let mobileMenuCustom = document.querySelector('#primary-menu.nav-menu');
    let mobileSubmenuCustom = document.querySelectorAll('.sub-menu');

    for (var i = 0; i < menuDropdownButton.length; i++) {
      menuDropdownButton[i].classList.add('transitionHalfSec')
    }
    
   function fadeIn(el) {
      el.classList.add('animate__fadeInUp');
      el.classList.remove('animate__fadeOutDown');
   }
	
   function fadeOut(el) {
      // Leave in .toggled-submenu class while animating
      el.classList.add('animate__fadeOutDown', 'toggled-submenu');
      el.classList.remove('animate__fadeInUp');
   }

    if (viewportWidth >= 600) {

      // Loop through dropdown buttons nodelist
      for (var i = 0, len = menuDropdownButton.length; i < len; i++) {
        menuDropdownButton[i].addEventListener('click', function() {

          // Assign nextElementSibling (ul) to a variable
          let thisSubmenu = this.nextElementSibling;

          // Add necessary animate.css class
          thisSubmenu.classList.add('animate__animated');

          if (thisSubmenu.classList.contains('toggled-submenu')) {
            this.classList.add('rotate180');
            fadeIn(thisSubmenu);
          } else {
            this.classList.remove('rotate180');
            fadeOut(thisSubmenu);

            // Remove .toggled-submenu after length of animation
            setTimeout(function() {
              thisSubmenu.classList.remove('toggled-submenu');
            }, 1000);
          }
        });
      }
      
      for (var i = 0, len = menuDropdownOnClick.length; i < len; i++) {
         menuDropdownOnClick[i].addEventListener('click', function () {
            let thisSubmenu = this.nextElementSibling;
      		
            thisSubmenu.classList.add('animate__animated');
      		
            if (thisSubmenu.classList.contains('toggled-submenu')) {
               thisSubmenu.classList.add('animate__fadeInUp');
               thisSubmenu.classList.remove('animate__fadeOutDown');
            } else {

               // Leave in .toggled-submenu class while animating
               thisSubmenu.classList.add('animate__fadeOutDown', 'toggled-submenu');
               thisSubmenu.classList.remove('animate__fadeInUp');

               // Remove .toggled-submenu after length of animation
               setTimeout(function() {
                  thisSubmenu.classList.remove('toggled-submenu');
               }, 1000);
            }
         });
      }
      
      window.addEventListener('click', function(e) {
         var navBlock = document.querySelector('.is-style-the-mx-nav');
         var navBlockBtn = document.querySelectorAll('.is-style-the-mx-nav .open-on-hover-click .wp-block-navigation-submenu__toggle');
         var navBlockSubmenu = document.querySelectorAll('.is-style-the-mx-nav .wp-block-navigation__submenu-container');
    		
         if (document.body.contains(navBlock) && !navBlock.contains(e.target)) {
    			
            for (let i = 0, len = navBlockSubmenu.length; i < len; i++ ) {
               navBlockBtn[i].classList.remove('rotate180');
    				
               navBlockSubmenu[i].classList.remove('animate__fadeInUp');
               navBlockSubmenu[i].classList.add('animate__fadeOutDown', 'toggled-submenu');
    				
               setTimeout(() => {
                  navBlockSubmenu[i].classList.remove('toggled-submenu');
               }, 1000);
            }
         }
      });
    }

    if (viewportWidth < 600) {
      if (typeof(mobileMenuCustom) !== 'undefined' && mobileMenuCustom !== null) {
        menuButton.addEventListener('click', function() {
          if (mainMenu.classList.contains('toggled')) {
            animateCSS('#primary-menu.nav-menu', 'slideInLeft');
            for (let i = 0, len = mobileSubmenuCustom.length; i < len; i++) {
              mobileSubmenuCustom[i].classList.remove('animate__animated', 'animate__slideInLeft', 'animate__slideOutLeft');
            }
          } else {
            animateCSS('#primary-menu.nav-menu', 'slideOutLeft');
            hideAfterAnimation(mobileMenuCustom, 1000);
            for (let i = 0, len = mobileSubmenuCustom.length; i < len; i++) {
              mobileSubmenuCustom[i].classList.remove('animate__animated', 'animate__slideInLeft', 'animate__slideOutLeft');
            }
          }
        });
      }

      if (typeof(mobileMenu) !== 'undefined' && mobileMenu !== null) {
        menuButton.addEventListener('click', function() {
          if (mainMenu.classList.contains('toggled')) {
            animateCSS('#primary-menu .nav-menu', 'slideInLeft');
            for (let i = 0, len = mobileSubmenu.length; i < len; i++) {
              mobileSubmenu[i].classList.remove('animate__animated', 'animate__slideInLeft', 'animate__slideOutLeft');
            }
          } else {
            animateCSS('#primary-menu .nav-menu', 'slideOutLeft');
            hideAfterAnimation(mobileMenu, 1000);
            for (let i = 0, len = mobileSubmenu.length; i < len; i++) {
              mobileSubmenu[i].classList.remove('animate__animated', 'animate__slideInLeft', 'animate__slideOutLeft');
            }
          }
        });
      }
    }
  }


  function animateSocialMenu() {
    let socialToggleButton = document.querySelector('#social-button');
    let socialPanel = document.querySelector('#menu-social');

    if (socialToggleButton !== null) {
      socialToggleButton.addEventListener('click', function() {
        if (socialPanel.classList.contains('toggled')) {
          animateCSS('#menu-social', 'slideInUp');
        } else {
          animateCSS('#menu-social', 'slideOutDown');
          hideAfterAnimation(socialPanel, 1000);
        }
      });
    }
  }


  function animateSidebar() {
    // Sidebar
    let sidebarPanel = document.querySelector('#secondary');

    if (sidebarButton !== null) {
      sidebarButton.addEventListener('click', function() {
        if (this.classList.contains('toggled')) {
          animateCSS('#secondary', 'slideInRight');
        } else {
          animateCSS('#secondary', 'slideOutRight');
          hideAfterAnimation(sidebarPanel, 1000);
        }
      });
    }
  }


  // Gloabl Variables for Comments form
  let commentTextarea = document.querySelector('.comment-form-comment');
  let commentAuthor = document.querySelector('.comment-form-author');
  let commentEmail = document.querySelector('.comment-form-email');
  let commentUrl = document.querySelector('.comment-form-url');

  let commentLabel = document.querySelector('.comment-form-comment label');
  let commentAuthorLabel = document.querySelector('.comment-form-author label');
  let commentEmailLabel = document.querySelector('.comment-form-email label');
  let commentUrlLabel = document.querySelector('.comment-form-url label');


  function animateFormLabels(formElement, formLabel) {
    /* Animates labels inside form elements */
    // Function parameters are element objects selected with document.querySelector

    // Check if form element exists
    if (formElement !== null && formLabel !== null) {
      formLabel.classList.add('animate__animated');
      formElement.addEventListener('focusin', function() {
        formLabel = this.querySelector('label');
        formLabel.classList.add('animate__fadeOutLeft');
        formLabel.classList.remove('animate__fadeInLeft');
        formElement.classList.add('isActive');
      });

      formElement.addEventListener('focusout', function() {
        formLabel = this.querySelector('label');
        formLabel.classList.remove('animate__fadeOutLeft');
        formLabel.classList.add('animate__fadeInLeft');
        formElement.classList.remove('isActive');
      });
    }
  }


  function animateCboxSlides() {
    /* For animations between Colorbox slides */

    let colorboxNext = document.querySelector('#cboxNext');
    let colorboxPrevious = document.querySelector('#cboxPrevious');
    let colorboxContent = document.querySelector('#cboxLoadedContent');

    if (colorboxNext !== null) {
      colorboxNext.addEventListener('click', () => {
        animateCSS('#cboxLoadedContent', 'fadeIn');
      });
    }

    if (colorboxPrevious !== null) {
      colorboxPrevious.addEventListener('click', () => {
        animateCSS('#cboxLoadedContent', 'fadeIn');
      });
    }
  }

// Global variables for the slide animations

// Standard galleries
let gallery1 = document.querySelector('#gallery-1');
let gallery2 = document.querySelector('#gallery-2');
let gallery3 = document.querySelector('#gallery-3');
let gallery4 = document.querySelector('#gallery-4');
let gallery5 = document.querySelector('#gallery-5');

// Block galleries
let gallery6 = document.querySelector('.wp-block-gallery:nth-of-type(1)');
let gallery7 = document.querySelector('.wp-block-gallery:nth-of-type(2)');
let gallery8 = document.querySelector('.wp-block-gallery:nth-of-type(3)');
let gallery9 = document.querySelector('.wp-block-gallery:nth-of-type(4)');
let gallery10 = document.querySelector('.wp-block-gallery:nth-of-type(5)');

// Standard gallery slides
let slides1 = document.querySelectorAll('.single.slider #gallery-1 .gallery-item');
let slides2 = document.querySelectorAll('.single.slider #gallery-2 .gallery-item');
let slides3 = document.querySelectorAll('.single.slider #gallery-3 .gallery-item');
let slides4 = document.querySelectorAll('.single.slider #gallery-4 .gallery-item');
let slides5 = document.querySelectorAll('.single.slider #gallery-5 .gallery-item');

// Block gallery slides
let slides6 = document.querySelectorAll('.single.slider .wp-block-gallery:nth-of-type(1) .blocks-gallery-item, .single.slider .wp-block-gallery:nth-of-type(1) .wp-block-image');
let slides7 = document.querySelectorAll('.single.slider .wp-block-gallery:nth-of-type(2) .blocks-gallery-item, .single.slider .wp-block-gallery:nth-of-type(2) .wp-block-image');
let slides8 = document.querySelectorAll('.single.slider .wp-block-gallery:nth-of-type(3) .blocks-gallery-item, .single.slider .wp-block-gallery:nth-of-type(3) .wp-block-image');
let slides9 = document.querySelectorAll('.single.slider .wp-block-gallery:nth-of-type(4) .blocks-gallery-item, .single.slider .wp-block-gallery:nth-of-type(4) .wp-block-image');
let slides10 = document.querySelectorAll('.single.slider .wp-block-gallery:nth-of-type(5) .blocks-gallery-item, .single.slider .wp-block-gallery:nth-of-type(5) .wp-block-image');

// Next panel buttons
let nextBtn1 = document.querySelector('#gallery-1 + .slider-button-panel .slider-next');
let nextBtn2 = document.querySelector('#gallery-2 + .slider-button-panel .slider-next');
let nextBtn3 = document.querySelector('#gallery-3 + .slider-button-panel .slider-next');
let nextBtn4 = document.querySelector('#gallery-4 + .slider-button-panel .slider-next');
let nextBtn5 = document.querySelector('#gallery-5 + .slider-button-panel .slider-next');
let nextBtn6 = document.querySelector('.wp-block-gallery:nth-of-type(1) + .slider-button-panel .slider-next');
let nextBtn7 = document.querySelector('.wp-block-gallery:nth-of-type(2) + .slider-button-panel .slider-next');
let nextBtn8 = document.querySelector('.wp-block-gallery:nth-of-type(3) + .slider-button-panel .slider-next');
let nextBtn9 = document.querySelector('.wp-block-gallery:nth-of-type(4) + .slider-button-panel .slider-next');
let nextBtn10 = document.querySelector('.wp-block-gallery:nth-of-type(5) + .slider-button-panel .slider-next');

// Previous panel buttons
let previousBtn1 = document.querySelector('#gallery-1 + .slider-button-panel .slider-previous');
let previousBtn2 = document.querySelector('#gallery-2 + .slider-button-panel .slider-previous');
let previousBtn3 = document.querySelector('#gallery-3 + .slider-button-panel .slider-previous');
let previousBtn4 = document.querySelector('#gallery-4 + .slider-button-panel .slider-previous');
let previousBtn5 = document.querySelector('#gallery-5 + .slider-button-panel .slider-previous');
let previousBtn6 = document.querySelector('.wp-block-gallery:nth-of-type(1) + .slider-button-panel .slider-previous');
let previousBtn7 = document.querySelector('.wp-block-gallery:nth-of-type(2) + .slider-button-panel .slider-previous');
let previousBtn8 = document.querySelector('.wp-block-gallery:nth-of-type(3) + .slider-button-panel .slider-previous');
let previousBtn9 = document.querySelector('.wp-block-gallery:nth-of-type(4) + .slider-button-panel .slider-previous');
let previousBtn10 = document.querySelector('.wp-block-gallery:nth-of-type(5) + .slider-button-panel .slider-previous');

let slideshowBtn1 = document.querySelector('#gallery-1 + .slider-button-panel .slider-startshow');
let slideshowBtn2 = document.querySelector('#gallery-2 + .slider-button-panel .slider-startshow');
let slideshowBtn3 = document.querySelector('#gallery-3 + .slider-button-panel .slider-startshow');
let slideshowBtn4 = document.querySelector('#gallery-4 + .slider-button-panel .slider-startshow');
let slideshowBtn5 = document.querySelector('#gallery-5 + .slider-button-panel .slider-startshow');
let slideshowBtn6 = document.querySelector('.wp-block-gallery:nth-of-type(1) + .slider-button-panel .slider-startshow');
let slideshowBtn7 = document.querySelector('.wp-block-gallery:nth-of-type(2) + .slider-button-panel .slider-startshow');
let slideshowBtn8 = document.querySelector('.wp-block-gallery:nth-of-type(3) + .slider-button-panel .slider-startshow');
let slideshowBtn9 = document.querySelector('.wp-block-gallery:nth-of-type(4) + .slider-button-panel .slider-startshow');
let slideshowBtn10 = document.querySelector('.wp-block-gallery:nth-of-type(5) + .slider-button-panel .slider-startshow');

let animateSlide = (btn, gallery, slides, counter) => {
//function animateSlide(btn, gallery, slides, counter) {
  // If the button exists on page
  if (btn !== null) {
    btn.addEventListener('click', () => {

      let nextSlide = slides[counter.value()];
      let previousSlide = slides[counter.value() - 1];

      if (nextSlide !== undefined) {
        nextSlide.classList.add('animate__animated', 'animate__fadeIn');
        nextSlide.addEventListener('animationend', function() {
          nextSlide.classList.remove('animate__animated', 'animate__fadeIn');
        });
      }

      if (previousSlide !== undefined) {
        previousSlide.classList.add('animate__animated', 'animate__fadeOut');
        previousSlide.addEventListener('animationend', function() {
          previousSlide.classList.remove('animate__animated', 'animate__fadeOut');
        });
      }
    });
  }
}

let animateSlideshow = (slideshowBtn, gallery, slideItems, counter) => {
  let isPlaying = false;
  let currentIndex = counter.value();
  let slideInterval;

  let startAnimation = () => {
    isPlaying = true;
    slideInterval = window.setInterval(fadeSlide, 5000);
  }

  let pauseAnimation = () => {
    isPlaying = false;
    clearInterval(slideInterval);
  }

  let fadeSlide = () => {
    currentIndex = currentIndex + 1;
    let nextSlide = slideItems[currentIndex];
    let previousSlide = slideItems[currentIndex - 1];

    if (nextSlide !== undefined) {
      nextSlide.classList.add('animate__animated', 'animate__fadeIn');
      nextSlide.addEventListener('animationend', function() {
        nextSlide.classList.remove('animate__animated', 'animate__fadeIn');
      });
    }

    if (previousSlide !== undefined) {
      previousSlide.classList.add('animate__animated', 'animate__fadeOut');
      previousSlide.classList.remove('hide');
      previousSlide.addEventListener('animationend', function() {
        previousSlide.classList.remove('animate__animated', 'animate__fadeOut');
        previousSlide.classList.add('hide');
      });
    }
  }

  if (slideshowBtn !== null) {
    slideshowBtn.addEventListener('click', () => {
      if (isPlaying === false) {
        startAnimation();
        //console.log('The slideshow animation is playing.');
      } else {
        pauseAnimation();
        //console.log('The slideshow animation is not playing.');
      }
    });
  }
}


  // Add .ripple class to auto-generated WordPress HTML, including menus
  // See CSS-Tricks article How to Recreate the Ripple Effect of Material Design Buttons
  // https://css-tricks.com/how-to-recreate-the-ripple-effect-of-material-design-buttons/
  let addMaterialInk = (event) => {
    const materialElement = event.currentTarget;
    const circle = document.createElement('span');
    const diameter = Math.max(materialElement.clientWidth, materialElement.clientHeight);
    const radius = diameter / 2;

    circle.style.width = circle.style.height = `${diameter}px`;
    circle.style.left = `${event.offsetX - radius}px`;
    circle.style.top = `${event.offsetY - radius}px`;
    circle.classList.add('ripple');

    const hadRipple = materialElement.getElementsByClassName('ripple')[0];

    if (hadRipple) {
      hadRipple.remove();
    }

    materialElement.appendChild(circle);
  }


  // Load functions if the body element has the .animate class
  if (bodyDiv.classList.contains('animate')) {
    window.addEventListener('load', () => {
      preloadDiv.style.display = 'none';
      bodyDiv.classList.add('animate__animated', 'animate__fadeIn');

      animateSocialMenu();

      animateFormLabels(commentTextarea, commentLabel);
      animateFormLabels(commentAuthor, commentAuthorLabel);
      animateFormLabels(commentEmail, commentEmailLabel);
      animateFormLabels(commentUrl, commentUrlLabel);

      // Counter in this function call is defined at the top of the-mx-scripts.js
      animateSlide(nextBtn1, gallery1, slides1, counter0);
      animateSlide(nextBtn2, gallery2, slides2, counter1);
      animateSlide(nextBtn3, gallery3, slides3, counter2);
      animateSlide(nextBtn4, gallery4, slides4, counter3);
      animateSlide(nextBtn5, gallery5, slides5, counter4);
      animateSlide(nextBtn6, gallery6, slides6, counter5);
      animateSlide(nextBtn7, gallery7, slides7, counter6);
      animateSlide(nextBtn8, gallery8, slides8, counter7);
      animateSlide(nextBtn9, gallery9, slides9, counter8);
      animateSlide(nextBtn10, gallery10, slides10, counter9);

      animateSlide(previousBtn1, gallery1, slides1, counter0);
      animateSlide(previousBtn2, gallery2, slides2, counter1);
      animateSlide(previousBtn3, gallery3, slides3, counter2);
      animateSlide(previousBtn4, gallery4, slides4, counter3);
      animateSlide(previousBtn5, gallery5, slides5, counter4);
      animateSlide(previousBtn6, gallery6, slides6, counter5);
      animateSlide(previousBtn7, gallery7, slides7, counter6);
      animateSlide(previousBtn8, gallery8, slides8, counter7);
      animateSlide(previousBtn9, gallery9, slides9, counter8);
      animateSlide(previousBtn10, gallery10, slides10, counter9);

      animateSlideshow(slideshowBtn1, gallery1, slides1, counter0);
      animateSlideshow(slideshowBtn2, gallery2, slides2, counter1);
      animateSlideshow(slideshowBtn3, gallery3, slides3, counter2);
      animateSlideshow(slideshowBtn4, gallery4, slides4, counter3);
      animateSlideshow(slideshowBtn5, gallery5, slides5, counter4);
      animateSlideshow(slideshowBtn6, gallery6, slides6, counter5);
      animateSlideshow(slideshowBtn7, gallery7, slides7, counter6);
      animateSlideshow(slideshowBtn8, gallery8, slides8, counter7);
      animateSlideshow(slideshowBtn9, gallery9, slides9, counter8);
      animateSlideshow(slideshowBtn10, gallery10, slides10, counter9);

      animateCboxSlides();

      const buttons = document.querySelectorAll('button:not(.menu-down-arrow), input[type="button"], .wp-block-button__link');
      const menuItems = document.querySelectorAll('.main-navigation .menu-item a, .main-navigation .page_item a');

      for (const button of buttons) {
        button.addEventListener('click', addMaterialInk);
      }

      for (const menuItem of menuItems) {
        menuItem.addEventListener('click', addMaterialInk);
      }
    });

    window.addEventListener('resize', () => {
      var timeOut = setTimeout(function() { // Delay rendering/event so that event doesn't fire multiple times
        animateMenu();
      }, 250);

      if (timeOut != null) {
        clearTimeout(timeOut);
      }
    });
  }

  if (bodyDiv.classList.contains('animate') && !bodyDiv.classList.contains('rtl')) {
    window.addEventListener('load', () => {
      animateMenu();
      animateSearchbar();
      animateSidebar();
    });
  }

  //}

})();

(function() { // opens document ready function

  // Function to add then immediately remove animate.css classes by name
  // element = a string in quotes representing an element .class or #id; animation = animation name without animate__ prefix.
  const animateCSS = (element, animation, prefix = 'animate__') =>
    new Promise((resolve, reject) => {
      const animationName = `${prefix}${animation}`;
      const node = document.querySelector(element);

      node.classList.add(`${prefix}animated`, animationName);

      function handleAnimationEnd(event) {
        event.stopPropagation();
        node.classList.remove(`${prefix}animated`, animationName);
        resolve('Animation ended');
      }

      node.addEventListener('animationend', handleAnimationEnd, {once: true});
    });


  // Helper function to hide elements after animation completes;
  // Use in the else part of if statement
  const hideAfterAnimation = (element, duration) => {
    if (element.classList.contains('hide')) {

      // Remove the .hide class
      element.classList.remove('hide');

      // Set a timeout to the length of the animation
      Number.isInteger(duration);

      setTimeout(function() {
        element.classList.add('hide');
      }, duration);
    }
  }


  // Global variables
  let viewportWidth = window.innerwidth;
  let bodyDiv = document.querySelector('body');
  let rtlSearchForm = document.querySelector('.rtl #header-button-panel .searchform');
  let rtlSidebarButton = document.querySelector('.rtl .sidebar-toggle');

  function animateRtlSearchbar() {
    let rtlSearchToggleButton = document.querySelector('.rtl .search-toggle');
    let rtlSearchButton = document.querySelector('.searchform .search-icon');
    let searchIcon = document.querySelector('.search-icon .material-icons');

    // Since the icon was dynamically created, it must be searched from a parent object via event delegation
    if (rtlSearchButton !== null) {
      rtlSearchButton.addEventListener('mouseenter', event => {
        if (event.target.className === '.search-icon .material-icons') {
          animateCSS('.search-icon .material-icons', 'rubberBand');
        }
      });
    }

    // Check if body elements has the class rtl
    // to isolate functions from ltr animation script
    if (bodyDiv.classList.contains('rtl')) {

      // Check if search button exists on the page
      if (rtlSearchToggleButton !== null) {
        rtlSearchToggleButton.addEventListener('click', function() {
          if (rtlSearchForm.classList.contains('toggled')) {
            animateCSS('#header-button-panel .searchform', 'fadeInLeft');
            animateCSS('.sidebar-toggle', 'fadeInLeft');
          } else {
            animateCSS('#header-button-panel .searchform', 'fadeOutLeft');
            hideAfterAnimation(rtlSearchForm, 1000);
            animateCSS('.sidebar-toggle', 'fadeOutLeft');
          }
        });
      }
    }
  }

  function animateRtlSidebar() {
    let rtlSidebarPanel = document.querySelector('.rtl #secondary');

    if (bodyDiv.classList.contains('rtl')) {
      if (rtlSidebarButton !== null) {
        rtlSidebarButton.addEventListener('click', function() {
          if (this.classList.contains('toggled')) {
            animateCSS('#secondary', 'slideInLeft');
          } else {
            animateCSS('#secondary', 'slideOutLeft');
            hideAfterAnimation(rtlSidebarPanel, 1000);
          }
        });
      }
    }
  }

  function animateRtlMenu() {
    let viewportWidth = window.innerWidth;
    let rtlMainMenu = document.querySelector('.main-navigation');
    let rtlMenuButton = document.querySelector('.main-navigation .menu-toggle');
    let rtlMenuDropdownButton = document.querySelectorAll('.main-navigation .menu-down-arrow');
    let rtlMobileMenu = document.querySelector('#primary-menu .nav-menu');
    let rtlMobileSubmenu = document.querySelectorAll('#primary-menu .nav-menu ul');
    let rtlMobileMenuCustom = document.querySelector('#primary-menu.nav-menu');
    let rtlMobileSubmenuCustom = document.querySelectorAll('.sub-menu');

    for (var i = 0; i < rtlMenuDropdownButton.length; i++) {
      rtlMenuDropdownButton[i].classList.add('transitionHalfSec')
    }

    if (bodyDiv.classList.contains('rtl')) { // Opens .rtl class check
      if (viewportWidth >= 600) {

        // Loop through dropdown buttons nodelist
        for (var i = 0, len = rtlMenuDropdownButton.length; i < len; i++) {
          rtlMenuDropdownButton[i].addEventListener('click', function() {

            // Assign nextElementSibling (ul) to a variable
            let thisSubmenu = this.nextElementSibling;

            // Add necessary animate.css class
            thisSubmenu.classList.add('animate__animated');

            if (thisSubmenu.classList.contains('toggled-submenu')) {
              this.classList.add('rotate180');
              thisSubmenu.classList.add('animate__fadeInUp');
              thisSubmenu.classList.remove('animate__fadeOutDown');
            } else {
              this.classList.remove('rotate180');

              // Leave in .toggled-submenu class while animating
              thisSubmenu.classList.add('animate__fadeOutDown', 'toggled-submenu');
              thisSubmenu.classList.remove('animate__fadeInUp');

              // Remove .toggled-submenu after length of animation
              setTimeout(function() {
                thisSubmenu.classList.remove('toggled-submenu');
              }, 1000);
            }
          });
        }
      }

      if (viewportWidth < 600) {
        if (typeof(rtlMobileMenuCustom) !== 'undefined' && rtlMobileMenuCustom !== null) {
          rtlMenuButton.addEventListener('click', function() {
            if (rtlMainMenu.classList.contains('toggled')) {
              animateCSS('#primary-menu.nav-menu', 'slideInRight');
              for (let i = 0, len = rtlMobileSubmenuCustom.length; i < len; i++) {
                rtlMobileSubmenuCustom[i].classList.remove('animate__animated', 'animate__slideInRight', 'animate__slideOutRight');
              }
            } else {
              animateCSS('#primary-menu.nav-menu', 'slideOutRight');
              hideAfterAnimation(rtlMobileMenuCustom, 1000);
              for (let i = 0, len = rtlMobileSubmenuCustom.length; i < len; i++) {
                rtlMobileSubmenuCustom[i].classList.remove('animate__animated', 'animate__slideInRight', 'animate__slideOutRight');
              }
            }
          });
        }

        if (typeof(rtlMobileMenu) !== 'undefined' && rtlMobileMenu !== null) {
          rtlMenuButton.addEventListener('click', function() {
            if (rtlMainMenu.classList.contains('toggled')) {
              animateCSS('#primary-menu .nav-menu', 'slideInRight');
              for (let i = 0, len = rtlMobileSubmenu.length; i < len; i++) {
                rtlMobileSubmenu[i].classList.remove('animate__animated', 'animate__slideInRight', 'animate__slideOutRight');
              }
            } else {
              animateCSS('#primary-menu .nav-menu', 'slideOutRight');
              hideAfterAnimation(rtlMobileMenu, 1000);
              for (let i = 0, len = rtlMobileSubmenu.length; i < len; i++) {
                rtlMobileSubmenu[i].classList.remove('animate__animated', 'animate__slideInRight', 'animate__slideOutRight');
              }
            }
          });
        }
      }
    } // Closes .rtl class check
  }

  if (bodyDiv.classList.contains('animate')) {
    window.addEventListener('load', function() {
      animateRtlMenu();
      animateRtlSearchbar();
      animateRtlSidebar();
    });
  }
})();

/* Scripts to work with Colorbox */
/* see http://www.jacklmoore.com/colorbox/ */

( function( $ ) {

	// If Colorbox is not loaded, do nothing
	if ( !$().colorbox ) {
		return;
	}

	if( $( 'body' ).hasClass( 'colorbox' ) ) {

		var windowWidth = $( window ).width();
		var wp59GalleryImgItems = $( '.wp-block-gallery .wp-block-image a[href$=".jpg"], .wp-block-gallery .wp-block-image a[href$=".jpeg"], .wp-block-gallery .wp-block-image a[href$=".png"], .wp-block-gallery .wp-block-image a[href$=".gif"]' );
		var galleryImgItems = $( '.blocks-gallery-item a[href$=".jpg"], .blocks-gallery-item a[href$=".jpeg"], .blocks-gallery-item a[href$=".png"], .blocks-gallery-item a[href$=".gif"], .gallery-icon a[href$=".jpg"], .gallery-icon a[href$=".jpeg"], .gallery-icon a[href$=".png"], .gallery-icon a[href$=".gif"]' );
		var wp59GalleryAttsItems = $( '.wp-block-gallery > figure > a:not([href$=".jpg"], [href$=".jpeg"], [href$=".png"], [href$=".gif"])' );
		var galleryAttsItems = $( '.blocks-gallery-item > figure > a:not([href$=".jpg"], [href$=".jpeg"], [href$=".png"], [href$=".gif"]), .gallery-icon > a:not([href$=".jpg"], [href$=".jpeg"], [href$=".png"], [href$=".gif"])' );
		var tiledGalleryImgItems = $( '.tiled-gallery-item a[href$=".jpg"], .tiled-gallery-item a[href$=".jpeg"], .tiled-gallery-item a[href$=".png"], .tiled-gallery-item a[href$=".gif"]' );
		var tiledGalleryAttsItems = $( '.tiled-gallery-item > a:not([href$=".jpg"], [href$=".jpeg"], [href$=".png"], [href$=".gif"])' );

		/* Jetpack tiled gallery compatible */

		if ( windowWidth < 600 ) {
			wp59GalleryImgItems.colorbox({
				rel: 'gal',
				maxWidth: '100%',
				maxHeight: '75%'
			});
			galleryImgItems.colorbox({
				rel: 'gal',
				maxWidth: '100%',
				maxHeight: '75%'
			});
			tiledGalleryImgItems.colorbox({
				rel: 'gal',
				maxWidth: '100%',
				maxHeight: '75%'
			});
		} else {
			wp59GalleryImgItems.colorbox({
				rel: 'gal',
				maxWidth: '75%',
				maxHeight: '75%',
				opacity: '0.75'
			});
			galleryImgItems.colorbox({
				rel: 'gal',
				maxWidth: '75%',
				maxHeight: '75%',
				opacity: '0.75'
			});
			tiledGalleryImgItems.colorbox({
				rel: 'gal',
				maxWidth: '75%',
				maxHeight: '75%',
				opacity: '0.75'
			});
		}

		if ( windowWidth >= 600 ) {
			wp59GalleryAttsItems.colorbox({
				rel: 'gal',
				iframe: 'true',
				innerHeight: '75%',
				innerWidth: '75%',
				opacity: '0.75'
			});
			galleryAttsItems.colorbox({
				rel: 'gal',
				iframe: 'true',
				innerHeight: '75%',
				innerWidth: '75%',
				opacity: '0.75'
			});
			tiledGalleryAttsItems.colorbox({
				rel: 'gal',
				iframe: 'true',
				innerHeight: '75%',
				innerWidth: '75%',
				opacity: '0.75'
			});
		} else if ( windowWidth < 600 ) {
			wp59GalleryAttsItems.colorbox({
				rel: 'gal',
				iframe: 'true',
				innerHeight: '75%',
				innerWidth: '100%'
			});
			galleryAttsItems.colorbox({
				rel: 'gal',
				iframe: 'true',
				innerHeight: '75%',
				innerWidth: '100%'
			});
			tiledGalleryAttsItems.colorbox({
				rel: 'gal',
				iframe: 'true',
				innerHeight: '75%',
				innerWidth: '100%'
			});
		} else {
			wp59GalleryAttsItems.colorbox({
				rel:'gal',
				maxHeight: '75%',
				maxWidth: '100%',
				opacity: '0.87',
				iframe: 'true'
			});
			galleryAttsItems.colorbox({
				rel:'gal',
				maxHeight: '75%',
				maxWidth: '100%',
				opacity: '0.87',
				iframe: 'true'
			});
			tiledGalleryAttsItems.colorbox({
				rel:'gal',
				maxHeight: '75%',
				maxWidth: '100%',
				opacity: '0.87',
				iframe: 'true'
			});
		}

		// disable scrolling on parent document
		$(document).on( 'cbox_open', function() {
			$( 'body' ).css({ overflow: 'hidden' });
		}).on( 'cbox_closed', function() {
			$( 'body' ).css({ overflow: 'auto' });
		});
	}

} ) (jQuery);

/**
 * File restore-js.js. Mixed jQuery/JavaScript file
 *
 * Restores this theme's JavaScripts with Jetpack Infinite Scroll.
 */

( function ( $ ) {
	
	var infiniteScrollLoaded = document.head.querySelector( '#the-neverending-homepage-css' );
	//var isDesktop = document.documentElement.classList.contains( 'skrollr-desktop' );
	var mobile = (/Android|iPhone|iPad|iPod|BlackBerry|Windows Phone/i).test(navigator.userAgent || navigator.vendor || window.opera);
	
	if ( infiniteScrollLoaded ) {
		$( document.body ).on( 'post-load', addJGDGrid );
		
		if ( !mobile ) {
			$( document.body ).on( 'post-load', addSkrollrEffects );
			if ( $( 'body' ).hasClass( 'skrollr-animate' ) ) {
				$( document.body ).on( 'post-load', function() {
					skrollr.get().refresh();
					//console.log('Skrollr refreshed.');
				} );
			}
		}
		
	}
	
	var windowWidth = window.innerWidth;
	var windowHeight = window.innerHeight;
	var i, len;
	
	function addJGDGrid() {
		var infSearch = document.querySelectorAll( '.search .infinite-wrap .post, .search .infinite-wrap .page' );
		var infStickyArticles = document.querySelectorAll( '.infinite-wrap .post.sticky' );
		
		if ( windowWidth >= 1280 ) {
			for ( i = 0; i < infStickyArticles.length; i++ ) {
				if ( jgdGridParams.layouts === 'twobytwo' ) {
					infStickyArticles[i].classList.add( 'two-by-two-centered-r' );
					infStickyArticles[i].classList.remove( 'three-fourths-centered-r' );
					infStickyArticles[i].classList.remove( 'jgd-column-1' );
				}
			}
		} else if ( windowWidth <= 1279 && windowWidth >= 720 ) {
			for ( i = 0, len = infStickyArticles.length; i < len; i++ ) {
				if ( jgdGridParams.layouts === 'twobytwo' ) {
					infStickyArticles[i].classList.add( 'three-fourths-centered-r' );
					infStickyArticles[i].classList.remove( 'jgd-column-1' );
					infStickyArticles[i].classList.remove( 'two-by-two-centered-r' );
				}
			}
		} else {
			for ( i = 0, len = infStickyArticles.length; i < len; i++ ) {
				if ( jgdGridParams.layouts === 'twobytwo' ) {
					infStickyArticles[i].classList.add( 'jgd-column-1' );
					infStickyArticles[i].classList.remove( 'three-fourths-centered-r' );
					infStickyArticles[i].classList.remove( 'two-by-two-centered-r' );
				}
			}
		}
		
		return addJGDGrid;
	}

	function addSkrollrEffects() {
		//console.log('addSkrollrEffects is loaded');
		
		var infCardHeader = document.querySelectorAll( '.home .infinite-wrap .format-standard:not(.has-post-thumbnail) .entry-header' );
		var infCardContent = document.querySelectorAll( '.home .infinite-wrap .format-standard .entry-content, .home .infinite-wrap .format-standard .entry-summary' );
		var infCardFooter = document.querySelectorAll( '.home .infinite-wrap .format-standard .entry-footer' );
		var infCardPf = document.querySelectorAll( '.home .post.format-aside, .home .post.format-status, .home .post.format-link, .home .post.format-quote' );
		
		if ( document.body.classList.contains( 'skrollr-animate' ) ) {
			var infCard = document.querySelectorAll( '.home .infinite-wrap .post.format-standard, .home .infinite-wrap .post.format-link' );
			var infGalleryWrap = document.querySelectorAll( '.home .infinite-wrap .gallery' );
			var infGalleryItem = document.querySelectorAll( '.home .infinite-wrap .gallery-item' );
			var infEntryTitle = document.querySelectorAll( '.home .infinite-wrap .format-gallery .entry-title, .infinite-wrap .format-image:not(.has-post-thumbnail) .entry-title, .infinite-wrap .format-audio .entry-title, .infinite-wrap .format-video .entry-title' );
			
			if ( restoreJSParams.layouts === 'centered' || restoreJSParams.layouts === 'wide' ) {
				for ( i = 1; i < infCard.length; i++ ) {
					infCard[i].setAttribute( 'data-0-bottom-center', 'opacity: 0' );
					infCard[i].setAttribute( 'data--200-bottom-center', 'opacity: 1.0' );
					infCard[infCard.length - 1].setAttribute( 'data-0-bottom-center', 'opacity: 1.0' );
				}
				
				for ( i = 0; i < infCardPf.length; i++ ) {
					infCardPf[i].setAttribute( 'data-0-bottom-center', 'transform: translateX(-25%); opacity: 0' );
					infCardPf[i].setAttribute( 'data-288-center-center', 'transform: translateX(0%); opacity: 1.0' );
					infCardPf[infCardPf.length - 1].setAttribute( 'data-0-bottom-center', 'translateX(0%); opacity: 1.0' );
				}
				
				for ( i = 1; i < infCardHeader.length; i++ ) {
					infCardHeader[i].setAttribute( 'data-0-bottom-center', 'transform: translateX(-12.5%); opacity: 0' );
					
					if ( windowWidth < 769 ) {
						infCardHeader[i].setAttribute( 'data-144-center-center', 'transform: translateX(0%); opacity: 1.0' );
					} else {
						infCardHeader[i].setAttribute( 'data-288-center-center', 'transform: translateX(0%); opacity: 1.0' );
					}
					infCardHeader[infCardHeader.length - 1].setAttribute( 'data-0-bottom-center', 'transform: translateX(0%); opacity: 1.0' );
				}
				
				for ( i = 1; i < infCardContent.length; i++ ) {
					infCardContent[i].setAttribute( 'data-0-bottom-center', 'transform: translateX(-25%); opacity: 0' );
					infCardContent[i].setAttribute( 'data-144-center-center', 'transform: translateX(0%); opacity: 1.0' );
					infCardContent[infCardContent.length - 1].setAttribute( 'data-0-bottom-center', 'transform: translateX(0%); opacity: 1.0' );
				}
				
				for ( i = 1; i < infCardFooter.length; i++ ) {
					infCardFooter[i].setAttribute( 'data-0-bottom-center', 'transform: translateX(-12.5%); opacity: 0' );
					if ( windowHeight < 769 ) {
						infCardFooter[i].setAttribute( 'data-144-center-center', 'transform: translateX(0%); opacity: 1.0' );
					} else {
						infCardFooter[i].setAttribute( 'data-288-center-center', 'transform: translateX(0%); opacity: 1.0' );
					}
					infCardFooter[infCardFooter.length - 1].setAttribute( 'data-0-bottom-center', 'transform: translateX(0%); opacity: 1.0' );
				}
			}
			
			// Gallery animations
			for ( i = 0; i < infGalleryItem.length; i++ ) {
				// fade-in of gallery images
				infGalleryItem[i].setAttribute( 'data--' + (i * 50) + '-bottom', 'opacity: 0' );
				infGalleryItem[i].setAttribute( 'data--' + ((i * 50) + 50) + '-bottom', 'opacity: 1.0' );
			}
			
			for ( i = 0; i < infEntryTitle.length; i++ ) {
				infEntryTitle[i].setAttribute( 'data-0-bottom-center', 'opacity: 0' );
				infEntryTitle[i].setAttribute( 'data-0-center-center', 'opacity: 1.0' );
				if ( windowWidth >= 1280 ) {
					infEntryTitle[i].setAttribute( 'data-0-bottom-center', 'opacity: 0; letter-spacing: 0.5em' );
					infEntryTitle[i].setAttribute( 'data-0-center-center', 'opacity: 1.0; letter-spacing: 0em' );
				}
			}
		}
		
		return addSkrollrEffects;
	}

} )( jQuery );
//# sourceMappingURL=../../maps/scripts.min.js.map
